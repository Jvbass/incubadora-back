# ===============================
# CONEXIÓN A BASE DE DATOS MYSQL
# ===============================

# URL de conexión a la base de datos.
# Cambia 'localhost' si tu base de datos está en otro servidor.
# Cambia '3306' si tu MySQL usa un puerto diferente.
# 'createDatabaseIfNotExist=true' creará la base de datos si no existe.
# 'useSSL=false' y 'allowPublicKeyRetrieval=true' son configuraciones comunes para desarrollo local.
# 'serverTimezone=UTC' es recomendado para evitar problemas con zonas horarias.
spring.datasource.url=jdbc:mysql://localhost:3306/incubadoradev?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC

# Nombre de usuario para la conexión a la base de datos.
# ¡CAMBIA ESTO!
spring.datasource.username=root

# Contraseña para la conexión a la base de datos.
# ¡CAMBIA ESTO!
spring.datasource.password=jpino

# Driver JDBC para MySQL. Spring Boot usualmente puede inferirlo, pero es bueno especificarlo.
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# ===============================
# CONFIGURACIÓN DE JPA/HIBERNATE
# ===============================

# Dialecto de Hibernate para MySQL. Permite a Hibernate generar SQL optimizado para MySQL.
# Usar una versión moderna del dialecto, como MySQL8Dialect si usas MySQL 8+.
# Si usas MySQL 5.7 o anterior, podrías usar org.hibernate.dialect.MySQL57Dialect.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
# o para MySQL 8+
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect


# Estrategia de generación del esquema de la base de datos (DDL - Data Definition Language).
# Opciones comunes:
#   'none': No hacer nada. Se asume que el esquema ya existe. RECOMENDADO PARA PRODUCCIÓN.
#   'validate': Validar que el esquema de la BD coincida con las entidades.
#   'update': Actualizar el esquema si hay cambios en las entidades. Útil para desarrollo.
#   'create': Crear el esquema cada vez, borrando los datos previos. Útil para pruebas iniciales.
#   'create-drop': Crear el esquema al inicio y borrarlo al final. Útil para pruebas.
# ¡USA 'update' O 'validate' CON CUIDADO EN DESARROLLO Y 'none' EN PRODUCCIÓN!
spring.jpa.hibernate.ddl-auto=update

# Muestra las sentencias SQL generadas por Hibernate en la consola.
# Muy útil para depuración y entender qué está haciendo Hibernate.
spring.jpa.show-sql=true

# Formatea las sentencias SQL mostradas para que sean más legibles.
spring.jpa.properties.hibernate.format_sql=true

# Permite el uso de nombres de estrategias de generación de identificadores mejorados y más portables.
spring.jpa.properties.hibernate.use_new_id_generator_mappings=true

# ===============================
# CONFIGURACIÓN DE SWAGGER (Springdoc OpenAPI)
# ===============================

# Ruta base para la UI de Swagger. Podrás acceder en http://localhost:8080/swagger-ui.html
springdoc.swagger-ui.path=/swagger-ui.html

# Ruta para la especificación OpenAPI en formato JSON.
springdoc.api-docs.path=/v3/api-docs

# Título de la API que aparecerá en la UI de Swagger
springdoc.api-docs.title=Incubadora.dev API

# Versión de la API
springdoc.api-docs.version=OPENAPI_3_0

# Descripción de la API
springdoc.api-docs.description=API para la plataforma Incubadora.dev, gestionando desarrolladores, mentores, reclutadores y proyectos.

# ... otras propiedades ...

# ===============================
# CONFIGURACIÓN DE JWT
# ===============================
# ¡USA UNA CLAVE MUCHO MÁS LARGA Y COMPLEJA EN PRODUCCIÓN!
# Puedes generar una online (ej. en Base64). Mínimo 256 bits (32 bytes).
jwt.secret.key=VGhpc0lzQVZlcnlMb25nQW5kU2VjdXJlU2VjcmV0S2V5Rm9yTXlJbmN1YmFkb3JhRGV2UHJvamVjdDEyMzQ1
jwt.token.expiration-ms=86400000

# ===============================
# OTRAS CONFIGURACIONES DEL SERVIDOR (Opcional)
# ===============================

# Puerto en el que correrá la aplicación Spring Boot (por defecto es 8080)
# server.port=8080

# Context path de la aplicación (por defecto es /)
# Ejemplo: si pones /api, todas las rutas serán /api/tu-endpoint
# server.servlet.context-path=/api

